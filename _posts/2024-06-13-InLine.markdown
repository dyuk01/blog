---
layout: post
title: In Line
date: 2024-06-13
categories: programmers python
---

## Problem
![alt text](/blog/public/img/InLine.png)

## Translation
Given n people standing in a line, each person is assigned a unique number from 1 to n. There are multiple ways to arrange these n people in a line. For example, if there are 3 people, the 6 possible ways to arrange them are:  
[1, 2, 3]<br>
[1, 3, 2]<br>
[2, 1, 3]<br>
[2, 3, 1]<br>
[3, 1, 2]<br>
[3, 2, 1]<br>

Given the number of people n and a natural number k, write a function solution(n, k) that returns the k-th permutation of the people when the permutations are listed in lexicographic order.

## Approach
The mathematical pattern that I found is that k can be divided by factorial of n - 1 to determine its position.

1. Make a list with numbers starting from 1 to n
2. Use correct computations(k / factorial(n - 1)) to find out the index for each position
3. Remove the found integer from its list

## Code
```python
import math

def solution(n, k):
    num = []
    answer = []
    k -= 1
    # Make a list from 1 to n
    for digit in range(1, n+1):
        num.append(digit)

    # Index finding computation
    for i in range(n,0,-1):
        fact = math.factorial(i - 1)
        index = k // fact
        k %= fact
        answer.append(num[index])
        num.remove(num[index])
    return answer
```

## Time Complexity
O(n<sup>2</sup>)
> Making a list will take O(n), but factorial function inside of for loop with result in O(n) * O(n) in worst scenario. Resulting in O(n<sup>2</sup>)

## Space Complexity
O(n)
> Initializes the numbers from 1 to n

---