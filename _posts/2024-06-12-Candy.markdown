---
layout: post
title: Candy
date: 2024-06-12
categories: leetcode python
---

## Problem
![alt text](/blog/public/img/Candy.png)

## Approach
Main goal is to give more candy to a child with a higher rating than the neighbor. Iterating through the array once with 2 pointers will not enough due to condition of the term 'neighbor' (check left and right). Thus, we have to iterate the array twice (Left->Right, Right->Left).

## Code
```python
class Solution(object):
    def candy(self, ratings):
        """
        :type ratings: List[int]
        :rtype: int
        """
        res = len(ratings) * [1]
        if res == 1:
            return 1
        # Iterates from left to right (2nd array to end)
        for i in range(1, len(ratings)):
            if ratings[i] > ratings[i - 1]:
                res[i] = res[i - 1] + 1
        # Iterates from right to left (last-2nd array to first)
        for i in range(len(ratings) - 2, -1, -1):
            if ratings[i] > ratings[i + 1]:
                res[i] = max(res[i], res[i+1] + 1)
        return sum(res)            
```

## Time Complexity
O(n)
> Iterates through the array twice. O(n) + O(n) = O(2n), resulting in O(n)

## Space Complexity
O(n)
> Initializes the variable 'res', which is the length of the array

---