---
layout: post
title: Two Sum II - Input Array Is Sorted
date: 2024-06-04
categories: leetcode two_pointers python
---

## Problem
![alt text](/blog/public/img/TwoSum2.png)

## Approach
The easiest solution would be to have nested for loop, which calculates the sum for each index. However, the process will take time and have time complexity of O(n^2). So, having two pointers--left and right--that starts from the both ends will reduce the time complexity to O(n) while still solving for the correct answer.

1. Initialize 2 pointers from the both ends
2. Make while loop to keep iterating until left becomes larger than right (out of bound)  
    3. If the sum is larger than the target, reduce the right by an index of 1  
    4. If the sum is smaller than the target, increment the index of left by 1  
5. Since the return value starts with 1, increment both pointers by 1 and return

## Code
```python
class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        l = 0
        r = len(numbers) - 1
        result = numbers[l] + numbers[r]
        # Out of bound check
        while result != target:
            result = numbers[l] + numbers[r]
            # Sum is larger. Reduce the sum by decrementing right by 1
            if result > target:
                r -= 1
            # Sum is smaller. Increase the sum by incrementing right by 1
            if result < target:
                l += 1
        # Since the index starts from 1 in expected return value, increment both pointers by 1
        l += 1
        r += 1
        return l, r 
```

## Time Complexity
O(n)
> Left and right pointers start from the end and meet at the middle at the worst scenario. Thus O(n)

## Space Complexity
O(1)
> Initializes two int variables, which are fixed amount of space. Therefore O(1)

---