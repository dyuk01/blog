---
layout: post
title: Jump Game
date: 2024-05-18
categories: leetcode String/Array python medium
---
## Problem
![alt text](/blog/public/img/JumpGame.png)

## Approach
Due to the misunderstanding of the instruction, I originally thought each element in the array represented my jump length, instead of maximum jump length. In this problem, if the first index's element was 3, you could move between 1~3 instead of just 3.  
In this problem, you don't have to worry about choosing between 1, 2, or the maximum number, since we can move by 1 and decrement the move count

1. Initialize element to represent the number of moves that I can perform.
2. Iterate through the array, and check the following :
  - Return false if moves cannot jump to the end of the array
  - Refill the number of moves if element in array is greater
  - Decrement move count by 1 when iterating to the next element
3. Return True since end of for loop without returning false means it has reached the end of the array.

## Code
```python
class Solution(object):
    def canJump(self, nums):
        # Number of moves that I can perform
        move = 0
        # Iterate through the array
        for i in nums :
            # Can no longer reach the end of the array
            if move < 0 :
                return False
            # If max jump is greater than current number of moves, refill the number of moves
            elif i > move :
                move = i
            # Consume one move count and move to the next index
            move -= 1
        # Reached the end of the array, returning true
        return True
```
## Time Complexity
O(n)
> Loop runs n times

## Space Complexity
O(1)
> Constant amount of extra space is used