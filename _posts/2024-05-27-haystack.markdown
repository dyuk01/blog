---
layout: post
title: Find the Index of the First Occurrence in a String
date: 2024-05-24
categories: leetcode String/Array python easy
---
## Problem
![alt text](/blog/public/img/haystack.png)

## Approach
Initial approach was to iterate haystack and needle with two different variables--i and j--in order to find the stop point whenever the word is found within the array. However, I quickly faced a problem where the needle would pass through the needle's length amount whenever its trying to find a word. For example, the word "Mississippi" is the haystack, and "issippi" is the needle. Although "issippi" should return index 4, my code would iterate over the overlapped words and return -1.

```python
class Solution(object):
    def strStr(self, haystack, needle):
        if needle in haystack:
            i = 0
            j = 0
            index = 0
            while j <= len(needle):
                if haystack[i] == needle[j]:
                    j += 1
                    if j == len(needle):
                        return i - len(needle) + 1
                else :
                    j = 0
                i += 1
            return i
        else:
            return -1
```
## Code
After brainstorming, I found out that there is a library in python that can perfrom this exact operation. By using <a href="https://docs.python.org/3/library/stdtypes.html  " target="_blank">.find()</a> function,  
I can successfully return the initial index of the word that I am looking for in an array.

```python
class Solution(object):
    def strStr(self, haystack, needle):
        return haystack.find(needle)
```

## Time Complexity
O(nm)
> If needle is found at the end of the haystack iteration, time complexity becomes O(nm).  
However, recent optimizations in python sorting  algorithms makes the average case much faster.

## Space Complexity
O(1)
> Does not use any extra space during the operation
---